# Analytics Service CI/CD - Complete Configuration

variables:
  SERVICE_NAME: "analytics-service"
  SERVICE_PORT: "8090"

# Build analytics service
build_analytics:
  stage: build
  script:
    - echo "Building $SERVICE_NAME..."
    - mvn clean compile -pl $SERVICE_NAME -am $MAVEN_CLI_OPTS
    - echo "✅ $SERVICE_NAME build completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == "TFMS_dev_v1.0.0"'
      changes:
        - "analytics-service/**/*"
    - if: '$CI_COMMIT_BRANCH == "TFMS_v1.0.0_dev"'
      changes:
        - "analytics-service/**/*"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "analytics-service/**/*"

# Package analytics service  
package_analytics:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache maven openjdk17
    - echo "Preparing to package $SERVICE_NAME..."
  script:
    - echo "Packaging $SERVICE_NAME with Maven..."
    - mvn package -DskipTests -pl $SERVICE_NAME -am $MAVEN_CLI_OPTS
    - echo "Building Docker image for $SERVICE_NAME..."
    # Build Docker image
    - cd analytics-service
    - docker build -t $SERVICE_NAME:$CI_COMMIT_SHA .
    - docker tag $SERVICE_NAME:$CI_COMMIT_SHA $SERVICE_NAME:latest
    - echo "✅ Successfully built $SERVICE_NAME Docker image"
  rules:
    - if: '$CI_COMMIT_BRANCH == "TFMS_dev_v1.0.0"'
      changes:
        - "analytics-service/**/*"
    - if: '$CI_COMMIT_BRANCH == "TFMS_v1.0.0_dev"'
      changes:
        - "analytics-service/**/*"
  artifacts:
    expire_in: 1 week
    paths:
      - "analytics-service/target/*.jar"

# Deploy analytics service with Docker Compose
deploy_analytics:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "Installing docker-compose and dependencies..."
    - apk add --no-cache curl py3-pip python3-dev libffi-dev openssl-dev gcc libc-dev make
    - pip3 install --upgrade pip setuptools
    # Install docker-compose v2 compatible version
    - pip3 install docker-compose==1.29.2 --force-reinstall
    - docker-compose --version || echo "Trying alternative installation..."
    # Alternative: Install docker-compose directly from GitHub
    - |
      if ! docker-compose --version; then
        curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
      fi
    - docker-compose --version
  script:
    - echo "Deploying $SERVICE_NAME with Docker Compose"
    - echo "Current directory: $(pwd)"
    - echo "Listing files: $(ls -la)"
    # In GitLab CI, we're already in the project root
    
    # Stop existing container if running
    - docker-compose down $SERVICE_NAME || true
    
    # Build and start the service
    - docker-compose build $SERVICE_NAME
    - docker-compose up -d $SERVICE_NAME
    - echo "Waiting for service to start..."
    - sleep 30
    
    # Get container info and logs
    - echo "=== Container Status ==="
    - docker-compose ps $SERVICE_NAME
    
    # Show recent logs
    - echo "=== Recent Service Logs ==="
    - docker-compose logs --tail=30 $SERVICE_NAME
    
    # Health check using container network
    - echo "=== Health Check Report ==="
    - |
      CONTAINER_ID=$(docker-compose ps -q $SERVICE_NAME)
      if [ ! -z "$CONTAINER_ID" ]; then
        echo "Container ID: $CONTAINER_ID"
        echo "Container Status: $(docker inspect --format='{{.State.Status}}' $CONTAINER_ID)"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        for i in $(seq 1 10); do
          if docker exec $CONTAINER_ID curl -f http://localhost:$SERVICE_PORT/actuator/health 2>/dev/null; then
            echo "✅ Health check PASSED (attempt $i)"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying in 10s..."
            sleep 10
          fi
        done
        
        # Final health check
        if docker exec $CONTAINER_ID curl -f http://localhost:$SERVICE_PORT/actuator/health 2>/dev/null; then
          echo "✅ Final health check PASSED"
          
          # Get detailed actuator info
          echo "=== Actuator Info ==="
          docker exec $CONTAINER_ID curl -s http://localhost:$SERVICE_PORT/actuator/info 2>/dev/null || echo "Info endpoint not available"
          
          echo "=== Deployment Summary ==="
          echo "Service: $SERVICE_NAME"
          echo "Port: $SERVICE_PORT"
          echo "Image: $(docker inspect --format='{{.Config.Image}}' $CONTAINER_ID)"
          echo "Started: $(docker inspect --format='{{.State.StartedAt}}' $CONTAINER_ID)"
          echo "Health: ✅ HEALTHY"
        else
          echo "❌ Final health check FAILED"
          echo "Container logs:"
          docker logs $CONTAINER_ID --tail=50
          exit 1
        fi
      else
        echo "❌ Container not found - deployment failed"
        docker-compose logs $SERVICE_NAME
        exit 1
      fi
    
    - echo "✅ $SERVICE_NAME deployment completed successfully"
  environment:
    name: development
    url: http://localhost:8090
  rules:
    - if: '$CI_COMMIT_BRANCH == "TFMS_dev_v1.0.0"'
      changes:
        - "analytics-service/**/*"
      when: manual
    - if: '$CI_COMMIT_BRANCH == "TFMS_v1.0.0_dev"'
      changes:
        - "analytics-service/**/*"
      when: manual
  dependencies:
    - package_analytics

# Test analytics service
test_analytics:
  stage: test
  script:
    - echo "Running tests for $SERVICE_NAME..."
    - mvn test -pl $SERVICE_NAME $MAVEN_CLI_OPTS
    - echo "✅ $SERVICE_NAME tests completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == "TFMS_dev_v1.0.0"'
      changes:
        - "analytics-service/**/*"
    - if: '$CI_COMMIT_BRANCH == "TFMS_v1.0.0_dev"'
      changes:
        - "analytics-service/**/*"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "analytics-service/**/*"
  dependencies:
    - build_analytics
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit:
        - "analytics-service/target/surefire-reports/TEST-*.xml"
    paths:
      - "analytics-service/target/surefire-reports/"
