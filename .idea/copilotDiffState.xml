<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/tfms-modules/routing-distribution-module/routing-service/src/main/java/com/saxion/proj/tfms/routing/service/interfaces/LocationMappingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tfms-modules/routing-distribution-module/routing-service/src/main/java/com/saxion/proj/tfms/routing/service/interfaces/LocationMappingService.java" />
              <option name="updatedContent" value="package com.saxion.proj.tfms.routing.service.interfaces;&#10;&#10;import com.saxion.proj.tfms.routing.dto.VrpRequestDto;&#10;import com.saxion.proj.tfms.routing.service.DistanceMatrixService;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;/**&#10; * Interface for location mapping and management&#10; * Follows Single Responsibility Principle - focused on location handling&#10; */&#10;public interface LocationMappingService {&#10;    &#10;    /**&#10;     * Build location mapping from VRP request&#10;     * &#10;     * @param request VRP request containing location data&#10;     * @return LocationMapping with indexed locations&#10;     */&#10;    LocationMapping buildLocationMapping(VrpRequestDto request);&#10;    &#10;    /**&#10;     * Location mapping data structure&#10;     */&#10;    class LocationMapping {&#10;        private final List&lt;DistanceMatrixService.Location&gt; locations;&#10;        private final Map&lt;String, Integer&gt; locationIndices;&#10;        private final int depotIndex;&#10;        &#10;        public LocationMapping(List&lt;DistanceMatrixService.Location&gt; locations,&#10;                             Map&lt;String, Integer&gt; locationIndices,&#10;                             int depotIndex) {&#10;            this.locations = locations;&#10;            this.locationIndices = locationIndices;&#10;            this.depotIndex = depotIndex;&#10;        }&#10;        &#10;        public List&lt;DistanceMatrixService.Location&gt; getLocations() { return locations; }&#10;        public Map&lt;String, Integer&gt; getLocationIndices() { return locationIndices; }&#10;        public int getDepotIndex() { return depotIndex; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tfms-modules/routing-distribution-module/routing-service/src/main/java/com/saxion/proj/tfms/routing/service/interfaces/VrpRequestValidator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tfms-modules/routing-distribution-module/routing-service/src/main/java/com/saxion/proj/tfms/routing/service/interfaces/VrpRequestValidator.java" />
              <option name="updatedContent" value="package com.saxion.proj.tfms.routing.service.interfaces;&#10;&#10;import com.saxion.proj.tfms.routing.dto.VrpRequestDto;&#10;&#10;/**&#10; * Interface for VRP request validation&#10; * Follows Single Responsibility Principle - focused only on validation&#10; */&#10;public interface VrpRequestValidator {&#10;    &#10;    /**&#10;     * Validate VRP request for common issues and constraints&#10;     * &#10;     * @param request VRP request to validate&#10;     * @throws IllegalArgumentException if validation fails&#10;     */&#10;    void validateRequest(VrpRequestDto request);&#10;    &#10;    /**&#10;     * Check if request is valid without throwing exceptions&#10;     * &#10;     * @param request VRP request to check&#10;     * @return ValidationResult containing status and error messages&#10;     */&#10;    ValidationResult isValid(VrpRequestDto request);&#10;    &#10;    /**&#10;     * Validation result container&#10;     */&#10;    class ValidationResult {&#10;        private final boolean valid;&#10;        private final String errorMessage;&#10;        &#10;        public ValidationResult(boolean valid, String errorMessage) {&#10;            this.valid = valid;&#10;            this.errorMessage = errorMessage;&#10;        }&#10;        &#10;        public boolean isValid() { return valid; }&#10;        public String getErrorMessage() { return errorMessage; }&#10;        &#10;        public static ValidationResult success() {&#10;            return new ValidationResult(true, null);&#10;        }&#10;        &#10;        public static ValidationResult failure(String message) {&#10;            return new ValidationResult(false, message);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>